//There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents
//a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.
//A critical connection is a connection that, if removed, will make some servers unable to reach some other server.
//Return all critical connections in the network in any order.

class Solution {
public:
    vector<vector<int>> ans;
    vector<int> timeOfInsertion;
    vector<int> lowestTimeOfInsertion;
    int timer = 1;
    vector<int> vis;

    void dfs(int node,int par,vector<vector<int>>& adj) {
        vis[node] = 1;
        timeOfInsertion[node] = lowestTimeOfInsertion[node] = timer++;

        for(auto it:adj[node]) {
            if(it==par) continue;
            if(!vis[it]) {
                dfs(it,node,adj);
                lowestTimeOfInsertion[node] = min(lowestTimeOfInsertion[node],lowestTimeOfInsertion[it]);
                if(timeOfInsertion[node] < lowestTimeOfInsertion[it]) ans.push_back({node,it});
            }
            else {
                lowestTimeOfInsertion[node] = min(lowestTimeOfInsertion[node],lowestTimeOfInsertion[it]);
            }
        }
    } 

    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        for(auto it:edges) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        timeOfInsertion.resize(n,0);
        lowestTimeOfInsertion.resize(n,0);
        vis.resize(n,0);
        dfs(0,-1,adj);
        return ans;
    }
};
